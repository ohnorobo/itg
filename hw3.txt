Formal Semantics

1.
[12 points] Translate the following sentences into quantified formulas of first-order logic:

	a. Angus likes someone and someone likes Julia.
	    (∃s1. like(Angus, s1) ∧ person(s1)) ∧ (∃s2. like(s2, Julia) ∧ person(s2))

	b. Nobody smiles at Pat.
		¬(∃s1. ∃a. smile(a) ∧ actor(s1, a) ∧ at(a, Pat))
        # a is an activity
	
	c. Nobody coughed or sneezed.
		¬(∃s1. cough(s1)) ∧ ¬(∃s2, sneeze(s2))
		
		or (equivalent)
		
		¬∃s1. cough(s1) ∨ sneeze(s1)

2.
[12 points] Translate the following verb phrases using λ-abstracts and quantified formulas of first-order logic:

	a. feed Cyril and give a cappucino to Angus
		λx. feed(x, Cyril) ∧ ∃y. give(x, Angus, y) ∧ cappicino(y)
	
	b. be loved by everyone
		λx. ∀person love(person, x)
	
	c. be loved by everyone and detested by no-one
		λx. ∀person love(person, x), ¬detest(person, x)


3.
[6 points] Let g=chase and h=λx.∀y.(dog(y)⇒chase(x,y)). If h=f(g), 
write down a λ-abstract for f.

   f = λk. λx. ∀y. (dog(y) ⇒ k(x, y)) 

4.
[7 points] Let g=give and h=λz.λx.∃y.(present(y)∧give(x,y,z)). If h=f(g), 
write down a λ-abstract for f.

    f = λk. λz. λx. ∃y. (present(y) ∧ k(x, y, z))




Machine Translation

5.
[5 points] Suppose that the grammar contains the following translation rules:
	A -e−7.82→ !/!
	v -e−15.4→ wonderful/wunderbar
Given the following English-German sentence pair:
	wonderful !
	wunderbar !
write down an expression for the probability of the following word alignment:
	wonderful !
		|	  |
	wunderbar !
	
		A
       -1
	  /   \
    -15.4 -7.82
	wo/wu  !/!  

    prob = e ^ ( -1 + -15.4 + -7.82 ) 
         = e ^ -24.22

6.
[10 points] Given the grammar and sentence pair above, write down an expression for the probability assigned to all possible word alignments of that sentence pair. Are there some derivations that result in identical word alignments? Which alignments?

    answered in 6.txt

7.
[20 points] Write a parsing program that outputs the best word alignment for each sentence pair, given the grammar and dictionary. As with monolingual CKY, all rules are either binary, or unary terminal productions. In monolingual CKY, you need to keep track of the beginning and ending points of your constituents. Here, you need to keep track of constituent spans in two languages simultaneously. Please email your source code and any instructions for compiling and running it.

    itg.py
    runable on the lab machines with ./itg.py

8.
[5 points] In the alignments produced by your program, what percentage of the German words were aligned to ϵ? What percentage of the English words were aligned to ϵ?

9.
[5 points] What percentage of the time was the “swap” rule A→⟨A A⟩ used, compared to the “in-order” rule?

10.
[5 points] Disable the swap rule in your program. Now, alignments will be ``monotonic'', to use the MT jargon. What percentage of German and English words are aligned to ϵ?
